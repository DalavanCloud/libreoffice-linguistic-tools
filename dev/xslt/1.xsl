<?xml version="1.0" encoding="UTF-8"?>
<!--
================================================================================
This file has been generated by the OpenOffice.org Linguistic Tools.
Jim Kornelsen, SIL, March 2013

This file makes changes to an XML file in order to correct spelling.
================================================================================
-->
<!--
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0">
-->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
<xsl:output method="xml" omit-xml-declaration="no" encoding="utf-8"
    indent="no"
    doctype-system="" /><!-- Can specify DTD file here. -->

<!-- This is called the identity template, because it simply copies
 everything in the original file.  Everything, that is, except for certain
 things we want to change, which we specify in the template(s) that follow. -->
<xsl:template match="@*|node()"><!-- this is shorthand for everything -->
  <xsl:copy>
    <xsl:apply-templates select="@*|node()"/><!-- all children recursively -->
  </xsl:copy>
</xsl:template>

<!-- Here is the element we want to change the value of. -->
<xsl:template match="//node3">
    <xsl:call-template name="look4changes"/>
</xsl:template>

<xsl:template name="look4changes">
  <xsl:copy>
    <xsl:apply-templates select="@*" mode="copy_attrs"/>
    <xsl:choose>
      <xsl:when test="contains(text(), 'hi')">
        <xsl:value-of select="concat(substring-before(text(), 'hi'),
                                     'there',
                                     substring-after(text(),  'hi'))" />
      </xsl:when>
      <xsl:when test="contains(text(), 'ham')">
        <xsl:value-of select="concat(substring-before(text(), 'ham'),
                                     'ster',
                                     substring-after(text(),  'ham'))" />
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="node()" /><!-- copy text unchanged -->
      </xsl:otherwise>
    </xsl:choose>
<!--
    <xsl:choose>
      <xsl:when test="text() = 'hi'">
        <xsl:text>there</xsl:text>
      </xsl:when>
      <xsl:when test="text() = 'ham'">
        <xsl:text>ster</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="node()" /><!- copy text unchanged ->
      </xsl:otherwise>
    </xsl:choose>
-->
  </xsl:copy>
</xsl:template>

<!-- This simply copies all attributes of an element -->
<xsl:template match="@*" mode="copy_attrs">
  <xsl:copy/>
</xsl:template>

</xsl:stylesheet>
